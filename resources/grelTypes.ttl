@prefix cc:      <http://creativecommons.org/ns#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fno:     <https://w3id.org/function/ontology#> .
@prefix foaf:    <http://xmlns.com/foaf/0.1/> .
@prefix grel:    <http://users.ugent.be/~bjdmeest/function/grel.ttl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix void:    <http://rdfs.org/ns/void#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

grel:void
    a                 void:DatasetDescription ;
    dcterms:title     "A VoID Description of the GREL Fno Descriptions Dataset" ;
    dcterms:creator   <https://ben.de-meester.org/#me> ;
    foaf:primaryTopic grel:dataset ;
.

<https://ben.de-meester.org/#me>
    rdf:type  foaf:Person ;
    foaf:mbox "mailto:Ben.DeMeester@UGent.be" ;
    foaf:name "Ben De Meester"@en .

grel:dataset
    a                    void:Dataset ;
    foaf:homepage        <https://github.com/OpenRefine/OpenRefine/wiki/General-Refine-Expression-Language> ;
    foaf:homepage        <https://fno.io> ;
    dcterms:title        "GREL Fno Descriptions"@en ;
    dcterms:description  "The FnO descriptions of the GREL functions" ;
    dcterms:contributor  <https://ben.de-meester.org/#me> ;
    dcterms:modified     "2022-10-12"^^xsd:date ;
    cc:license           <http://creativecommons.org/license/by/3.0/> ;
    dcterms:issued       "2016-12-15"^^xsd:date ;
    dcterms:rights       "Copyright Â© Ghent University -- imec -- IDLab"@en ;
    dcterms:subject      <http://dbpedia.org/resource/Function_(mathematics)> ;
    dcterms:subject      <http://dbpedia.org/resource/Function_model> ;
    void:feature         <http://www.w3.org/ns/formats/Turtle> ;
    void:exampleResource grel:boolean_and ;
    void:vocabulary      <https://w3id.org/function/ontology#> .

# Contents:
# - Parameters (per java) param_{var} with predicate p_{type}_{var}
# - Outputs (per java) output_{type} with predicate o_{type}
# - Problems (per java) prob_{var}
#   - Functions (per java)

grel:prob_array
    a                   fno:Problem ;
    fno:name            "The array problem"^^xsd:string ;
    dcterms:description ""^^xsd:string .

grel:prob_array_join
    a                   fno:Problem ;
    fno:name            "The array join problem"^^xsd:string ;
    dcterms:description "Joining an array into a string."^^xsd:string .

grel:param_a
    a             fno:Parameter ;
    fno:name      "a" ;
    rdfs:label    "a" ;
    fno:predicate grel:p_array_a ;
    fno:type      rdf:List ;
    fno:required  "true"^^xsd:boolean .

grel:param_string_sep
    a             fno:Parameter ;
    fno:name      "sep" ;
    rdfs:label    "sep" ;
    fno:predicate grel:p_string_sep ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:stringOut
    a             fno:Output ;
    fno:name      "output string" ;
    rdfs:label    "output string" ;
    fno:predicate grel:stringOutput ;
    fno:type      xsd:string .

grel:prob_bool
    a                   fno:Problem ;
    fno:name            "The bool problem"^^xsd:string ;
    dcterms:description ""^^xsd:string .

grel:prob_and
    a                   fno:Problem ;
    fno:name            "The and problem"^^xsd:string ;
    dcterms:description "Returning the logical AND between two (boolean) operands."^^xsd:string .

grel:bool_array_b
    a             fno:Parameter ;
    fno:name      "b" ;
    rdfs:label    "b" ;
    fno:predicate grel:param_rep_b ;
    fno:type      rdf:List ;
    fno:required  "true"^^xsd:boolean .

grel:output_bool
    a             fno:Output ;
    fno:name      "bool" ;
    rdfs:label    "bool" ;
    fno:predicate grel:o_bool ;
    fno:type      xsd:boolean .

grel:prob_or
    a                   fno:Problem ;
    fno:name            "The or problem"^^xsd:string ;
    dcterms:description "Returning the logical OR between two (boolean) operands."^^xsd:string .

grel:prob_not
    a                   fno:Problem ;
    fno:name            "The not problem"^^xsd:string ;
    dcterms:description "Returning the boolean negation of the argument."^^xsd:string .

grel:param_b
    a             fno:Parameter ;
    fno:name      "b" ;
    rdfs:label    "b" ;
    fno:predicate grel:bool_b ;
    fno:type      xsd:boolean ;
    fno:required  "true"^^xsd:boolean .

grel:prob_if
    a                   fno:Problem ;
    fno:name            "The if problem"^^xsd:string ;
    dcterms:description "Doing an if-statement."^^xsd:string .

grel:param_true
    a             fno:Parameter ;
    fno:name      "eTrue" ;
    rdfs:label    "eTrue" ;
    fno:predicate grel:any_true ;
    fno:type      xsd:any ;
    fno:required  "true"^^xsd:boolean .

grel:param_false
    a             fno:Parameter ;
    fno:name      "eFalse" ;
    rdfs:label    "eFalse" ;
    fno:predicate grel:any_false ;
    fno:type      xsd:any ;
    fno:required  "false"^^xsd:boolean .

grel:output_any
    a             fno:Output ;
    fno:name      "any" ;
    rdfs:label    "any" ;
    fno:predicate grel:o_any ;
    fno:type      xsd:any .

grel:prob_string
    a                   fno:Problem ;
    fno:name            "The string problem"^^xsd:string ;
    dcterms:description ""^^xsd:string .

grel:prob_strlen
    a                   fno:Problem ;
    fno:name            "The strlen problem"^^xsd:string ;
    dcterms:description "Computing the length of a given input string."^^xsd:string .

grel:valueParam
    a             fno:Parameter ;
    fno:name      "input value" ;
    rdfs:label    "input value" ;
    fno:predicate grel:valueParameter ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:output_number
    a             fno:Output ;
    fno:name      "number" ;
    rdfs:label    "number" ;
    fno:predicate grel:o_number ;
    fno:type      xsd:integer .

grel:prob_strstarts
    a                   fno:Problem ;
    fno:name            "The strstarts problem"^^xsd:string ;
    dcterms:description "Whether a string starts another string"^^xsd:string .

grel:param_string_sub
    a             fno:Parameter ;
    fno:name      "sub" ;
    rdfs:label    "sub" ;
    fno:predicate grel:string_sub ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:prob_strends
    a                   fno:Problem ;
    fno:name            "The strends problem"^^xsd:string ;
    dcterms:description "Whether a string ends another string"^^xsd:string .

grel:prob_contains
    a                   fno:Problem ;
    fno:name            "The contains problem"^^xsd:string ;
    dcterms:description "Whether a string contains another string"^^xsd:string .

grel:prob_indexOf
    a                   fno:Problem ;
    fno:name            "The indexOf problem"^^xsd:string ;
    dcterms:description "The index of the first occurence within a string."^^xsd:string .

grel:prob_lcase
    a                   fno:Problem ;
    fno:name            "The lcase problem"^^xsd:string ;
    dcterms:description "Converting a string to lower case characters."^^xsd:string .

grel:prob_ucase
    a                   fno:Problem ;
    fno:name            "The ucase problem"^^xsd:string ;
    dcterms:description "Converting a string to upper case characters."^^xsd:string .

grel:prob_substr
    a                   fno:Problem ;
    fno:name            "The substr problem"^^xsd:string ;
    dcterms:description "Getting the sub-string of a given string"^^xsd:string .

grel:p_int_i_from
    a             fno:Parameter ;
    fno:name      "from" ;
    rdfs:label    "from" ;
    fno:predicate grel:param_int_i_from ;
    fno:type      xsd:int ;
    fno:required  "true"^^xsd:boolean .

grel:p_int_i_opt_to
    a             fno:Parameter ;
    fno:name      "to" ;
    rdfs:label    "to" ;
    fno:predicate grel:param_int_i_opt_to ;
    fno:type      xsd:int ;
    fno:required  "false"^^xsd:boolean .

grel:prob_lastIndexOf
    a                   fno:Problem ;
    fno:name            "The lastIndexOf problem"^^xsd:string ;
    dcterms:description "Retrieving the last index of an occurrence in a string."^^xsd:string .

grel:prob_replace
    a        fno:Problem ;
    fno:name "The replace problem"^^xsd:string ;
    dcterms:description
             "Replacing each non-overlapping occurrence of a regular expression pattern with a replacement string. Regular expession matching may involve modifier flags."^^xsd:string .

grel:param_find
    a             fno:Parameter ;
    fno:name      "f" ;
    rdfs:label    "f" ;
    fno:predicate grel:p_string_find ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:param_replace
    a             fno:Parameter ;
    fno:name      "r" ;
    rdfs:label    "r" ;
    fno:predicate grel:p_string_replace ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:prob_regex
    a        fno:Problem ;
    fno:name "The regex problem"^^xsd:string ;
    dcterms:description
             "Returning true if a string (?arg1) matches the regular expression supplied as a pattern (?arg2) as influenced by the value of flags (?arg3), otherwise returns false."^^xsd:string .

grel:output_array
    a             fno:Output ;
    fno:name      "array" ;
    rdfs:label    "array" ;
    fno:predicate grel:o_array ;
    fno:type      rdf:List .

grel:param_regex
    a             fno:Parameter ;
    fno:name      "p" ;
    rdfs:label    "p" ;
    fno:predicate grel:p_string_regex ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:param_any_e
    a             fno:Parameter ;
    fno:name      "e" ;
    rdfs:label    "e" ;
    fno:predicate grel:p_any_e ;
    fno:type      xsd:any ;
    fno:required  "true"^^xsd:boolean .

grel:param_int_i
    a             fno:Parameter ;
    fno:name      "d1" ;
    rdfs:label    "d1" ;
    fno:predicate grel:p_int_i ;
    fno:type      xsd:int ;
    fno:required  "true"^^xsd:boolean .

grel:param_int_i2
    a             fno:Parameter ;
    fno:name      "d2" ;
    rdfs:label    "d2" ;
    fno:predicate grel:p_int_i2 ;
    fno:type      xsd:int ;
    fno:required  "true"^^xsd:boolean .

grel:param_int_rep_i
    a             fno:Parameter ;
    fno:name      "n3" ;
    rdfs:label    "n3" ;
    fno:predicate grel:p_rep_i ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:param_opt_sep
    a             fno:Parameter ;
    fno:name      "sep" ;
    rdfs:label    "sep" ;
    fno:predicate grel:p_opt_sep ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:param_fragment
    a             fno:Parameter ;
    fno:name      "frag" ;
    rdfs:label    "frag" ;
    fno:predicate grel:p_fragment ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:param_bool_opt_b
    a             fno:Parameter ;
    fno:name      "b?" ;
    rdfs:label    "b?" ;
    fno:predicate grel:p_bool_opt_b ;
    fno:type      xsd:boolean ;
    fno:required  "false"^^xsd:boolean .

grel:valueParam2
    a             fno:Parameter ;
    fno:name      "input value 2" ;
    rdfs:label    "input value 2" ;
    fno:predicate grel:valueParameter2 ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:prob_encode_for_uri
    a                   fno:Problem ;
    fno:name            "The encode_for_uri problem"^^xsd:string ;
    dcterms:description "encoding for a URI"^^xsd:string .

grel:modeParam
    a             fno:Parameter ;
    fno:name      "mode value" ;
    rdfs:label    "mode value" ;
    fno:type      xsd:string ;
    fno:predicate grel:modeParameter ;
    fno:required  "true"^^xsd:boolean .

grel:prob_crypto
    a                   fno:Problem ;
    fno:name            "The crypto problem"^^xsd:string ;
    dcterms:description ""^^xsd:string .

grel:prob_md5
    a                   fno:Problem ;
    fno:name            "The md5 problem"^^xsd:string ;
    dcterms:description "Calculating the md5 checksum."^^xsd:string .

grel:prob_sha1
    a                   fno:Problem ;
    fno:name            "The sha1 problem"^^xsd:string ;
    dcterms:description "Calculating the SHA1 checksum."^^xsd:string .

grel:param_string_encoding
    a             fno:Parameter ;
    fno:name      "encoding" ;
    rdfs:label    "encoding" ;
    fno:predicate grel:p_string_encoding ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:param_string_encoder
    a             fno:Parameter ;
    fno:name      "encoder" ;
    rdfs:label    "encoder" ;
    fno:predicate grel:p_string_encoder ;
    fno:type      xsd:string ;
    fno:required  "true"^^xsd:boolean .

grel:prob_date
    a                   fno:Problem ;
    fno:name            "The date problem"^^xsd:string ;
    dcterms:description ""^^xsd:string .

grel:prob_timezone
    a                   fno:Problem ;
    fno:name            "The timezone problem"^^xsd:string ;
    dcterms:description "Getting the timezone of a string."^^xsd:string .

grel:prob_day
    a                   fno:Problem ;
    fno:name            "The day problem"^^xsd:string ;
    dcterms:description "Extracting the day from a date/time literal."^^xsd:string .

grel:prob_month
    a                   fno:Problem ;
    fno:name            "The month problem"^^xsd:string ;
    dcterms:description "Extracting the month from a date/time literal."^^xsd:string .

grel:prob_hours
    a                   fno:Problem ;
    fno:name            "The hours problem"^^xsd:string ;
    dcterms:description "Extracting the hours from a date/time literal."^^xsd:string .

grel:prob_seconds
    a                   fno:Problem ;
    fno:name            "The seconds problem"^^xsd:string ;
    dcterms:description "Extracting the seconds from a date/time literal."^^xsd:string .

grel:prob_minutes
    a                   fno:Problem ;
    fno:name            "The minutes problem"^^xsd:string ;
    dcterms:description "Extracting the minutes from a date/time literal."^^xsd:string .

grel:prob_year
    a                   fno:Problem ;
    fno:name            "The year problem"^^xsd:string ;
    dcterms:description "Extracting the year from a date/time literal."^^xsd:string .

grel:prob_now
    a                   fno:Problem ;
    fno:name            "The now problem"^^xsd:string ;
    dcterms:description "Getting the current date and time."^^xsd:string .

grel:output_datetime
    a             fno:Output ;
    fno:name      "datetime" ;
    rdfs:label    "datetime" ;
    fno:predicate grel:o_datetime ;
    fno:type      xsd:dateTime .

grel:param_string_pattern
   a             fno:Parameter ;
   fno:name      "pattern" ;
   rdfs:label    "pattern" ;
   fno:predicate grel:p_string_pattern ;
   fno:type      xsd:string ;
   fno:required  "true"^^xsd:boolean .

grel:output_date
    a             fno:Output ;
    fno:name      "date" ;
    rdfs:label    "date" ;
    fno:predicate grel:o_date ;
    fno:type      xsd:date .

grel:param_datetime_d
   a             fno:Parameter ;
   fno:name      "d" ;
   rdfs:label    "d" ;
   fno:predicate grel:p_datetime_d ;
   fno:type      xsd:dateTime ;
   fno:required  "true"^^xsd:boolean .

grel:param_datetime_d2
   a             fno:Parameter ;
   fno:name      "d2" ;
   rdfs:label    "d2" ;
   fno:predicate grel:p_datetime_d2 ;
   fno:type      xsd:dateTime ;
   fno:required  "true"^^xsd:boolean .

grel:param_string_timeunit
   a             fno:Parameter ;
   fno:name      "timeUnit" ;
   rdfs:label    "timeUnit" ;
   fno:predicate grel:p_string_timeunit ;
   fno:type      xsd:string ;
   fno:required  "true"^^xsd:boolean .

grel:param_date_d
   a             fno:Parameter ;
   fno:name      "d" ;
   rdfs:label    "d" ;
   fno:predicate grel:p_date_d ;
   fno:type      xsd:date ;
   fno:required  "true"^^xsd:boolean .

grel:param_dec_n
   a             fno:Parameter ;
   fno:name      "d" ;
   rdfs:label    "d" ;
   fno:predicate grel:p_dec_n ;
   fno:type      xsd:decimal ;
   fno:required  "true"^^xsd:boolean .

grel:param_string_unit
   a             fno:Parameter ;
   fno:name      "unit" ;
   rdfs:label    "unit" ;
   fno:predicate grel:p_string_unit ;
   fno:type      xsd:string ;
   fno:required  "true"^^xsd:boolean .

grel:prob_mathematical
    a                   fno:Problem ;
    fno:name            "The mathematical problem"^^xsd:string ;
    dcterms:description ""^^xsd:string .

grel:prob_floor
    a        fno:Problem ;
    fno:name "The floor problem"^^xsd:string ;
    dcterms:description
             "Returning the largest (closest to positive infinity) number with no fractional part that is not greater than the given value."^^xsd:string .

grel:output_decimal
    a             fno:Output ;
    fno:name      "decimal" ;
    rdfs:label    "decimal" ;
    fno:predicate grel:o_decimal ;
    fno:type      xsd:decimal .

grel:prob_ceil
    a        fno:Problem ;
    fno:name "The ceil problem"^^xsd:string ;
    dcterms:description
             "Returning the smallest (closest to negative infinity) number with no fractional part that is not less than the value of arg."^^xsd:string .

grel:prob_round
    a        fno:Problem ;
    fno:name "The round problem"^^xsd:string ;
    dcterms:description
             "Returning the number with no fractional part that is closest to the argument. If there are two such numbers, then the one that is closest to positive infinity is returned."^^xsd:string .

grel:prob_min
    a                   fno:Problem ;
    fno:name            "The min problem"^^xsd:string ;
    dcterms:description "Returning the smallest value of the input."^^xsd:string .

grel:param_dec_n2
   a             fno:Parameter ;
   fno:name      "d2" ;
   rdfs:label    "d2" ;
   fno:predicate grel:param_n2 ;
   fno:type      xsd:decimal ;
   fno:required  "true"^^xsd:boolean .

grel:prob_max
    a                   fno:Problem ;
    fno:name            "The max problem"^^xsd:string ;
    dcterms:description "Returning the largest value of the input."^^xsd:string .

grel:prob_coalesce
    a                   fno:Problem ;
    fno:name            "The coalesce problem"^^xsd:string ;
    dcterms:description "Returning the first bound argument."^^xsd:string .

grel:param_dec_n_exp
   a             fno:Parameter ;
   fno:name      "e" ;
   rdfs:label    "e" ;
   fno:predicate grel:p_any_exp ;
   fno:type      xsd:decimal ;
   fno:required  "true"^^xsd:boolean .

grel:param_string_field
   a             fno:Parameter ;
   fno:name      "field" ;
   rdfs:label    "field" ;
   fno:predicate grel:p_string_field ;
   fno:type      xsd:string ;
   fno:required  "true"^^xsd:boolean .

grel:param_any_rep_e
   a             fno:Parameter ;
   fno:name      "objects" ;
   rdfs:label    "objects" ;
   fno:predicate grel:p_any_rep_e ;
   fno:type      xsd:any ;
   fno:required  "true"^^xsd:boolean .
